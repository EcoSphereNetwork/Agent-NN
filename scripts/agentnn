#!/bin/bash
# -*- coding: utf-8 -*-
# Agent-NN CLI Tool - Vereinheitlichte Kommandozeilen-Schnittstelle

set -euo pipefail

# CLI-Konfiguration
CLI_VERSION="1.0.0"
CLI_NAME="agentnn"
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
REPO_ROOT="$(dirname "$SCRIPT_DIR")"

source "$SCRIPT_DIR/lib/log_utils.sh"
source "$SCRIPT_DIR/lib/status_utils.sh"
source "$SCRIPT_DIR/helpers/common.sh"

# Global verfügbare Kommandos
declare -A COMMANDS=(
    [setup]="System einrichten und konfigurieren"
    [start]="Services starten"
    [stop]="Services stoppen"
    [restart]="Services neustarten"
    [status]="System-Status anzeigen"
    [test]="Tests ausführen"
    [validate]="System validieren"
    [repair]="Probleme automatisch beheben"
    [logs]="Service-Logs anzeigen"
    [clean]="Umgebung bereinigen"
    [deploy]="System deployen"
    [config]="Konfiguration verwalten"
    [doctor]="Systemdiagnose durchführen"
    [version]="Version anzeigen"
    [help]="Hilfe anzeigen"
)

# Kommando-Kategorien
declare -A COMMAND_CATEGORIES=(
    [setup]="Setup & Installation"
    [start]="Service Management"
    [stop]="Service Management"
    [restart]="Service Management"
    [status]="Monitoring & Debug"
    [logs]="Monitoring & Debug"
    [test]="Testing & Quality"
    [validate]="Testing & Quality"
    [repair]="Maintenance"
    [clean]="Maintenance"
    [deploy]="Deployment"
    [config]="Configuration"
    [doctor]="Diagnostics"
    [version]="Info"
    [help]="Info"
)

usage() {
    cat << EOF
${BLUE}
 █████╗  ██████╗ ███████╗███╗   ██╗████████╗      ███╗   ██╗███╗   ██╗
██╔══██╗██╔════╝ ██╔════╝████╗  ██║╚══██╔══╝      ████╗  ██║████╗  ██║
███████║██║  ███╗█████╗  ██╔██╗ ██║   ██║   █████╗██╔██╗ ██║██╔██╗ ██║
██╔══██║██║   ██║██╔══╝  ██║╚██╗██║   ██║   ╚════╝██║╚██╗██║██║╚██╗██║
██║  ██║╚██████╔╝███████╗██║ ╚████║   ██║         ██║ ╚████║██║ ╚████║
╚═╝  ╚═╝ ╚═════╝ ╚══════╝╚═╝  ╚═══╝   ╚═╝         ╚═╝  ╚═══╝╚═╝  ╚═══╝
${NC}
${CYAN}Agent-NN CLI v${CLI_VERSION} - Multi-Agent System Management${NC}

Usage: ${CLI_NAME} <command> [options] [arguments]

SETUP & INSTALLATION:
  setup [preset]         System einrichten (presets: dev|ci|minimal|mcp|full)
  config <action>        Konfiguration verwalten (show|edit|reset|validate)

SERVICE MANAGEMENT:
  start [service]        Services starten (all|standard|mcp|<service-name>)
  stop [service]         Services stoppen
  restart [service]      Services neustarten
  logs [service]         Service-Logs anzeigen

MONITORING & DEBUG:
  status [--watch]       System-Status anzeigen
  doctor [--fix]         Systemdiagnose und automatische Reparatur
  validate [category]    System validieren

TESTING & QUALITY:
  test [category]        Tests ausführen (unit|integration|e2e|all)
  
MAINTENANCE:
  repair [component]     Probleme automatisch beheben
  clean [--deep]         Umgebung bereinigen

DEPLOYMENT:
  deploy <target>        System deployen (local|staging|production)

GENERAL:
  version               Version und Build-Informationen
  help [command]        Hilfe anzeigen

GLOBALE OPTIONEN:
  --verbose, -v         Ausführliche Ausgabe
  --quiet, -q           Minimale Ausgabe  
  --dry-run             Nur anzeigen, nicht ausführen
  --yes, -y             Automatisch bestätigen
  --config FILE         Alternative Konfigurationsdatei

BEISPIELE:
  ${CLI_NAME} setup dev                    # Entwicklungsumgebung einrichten
  ${CLI_NAME} start --wait                 # Services starten und warten
  ${CLI_NAME} status --watch               # Live-Status-Monitoring
  ${CLI_NAME} test unit --coverage         # Unit Tests mit Coverage
  ${CLI_NAME} doctor --fix                 # Automatische Diagnose und Reparatur
  ${CLI_NAME} deploy local --build         # Lokales Deployment mit Build

Für detaillierte Hilfe zu einem Kommando: ${CLI_NAME} help <command>

EOF
}

# Erweiterte Hilfe für spezifische Kommandos
show_command_help() {
    local command="$1"
    
    case "$command" in
        setup)
            cat << EOF
${CYAN}agentnn setup${NC} - System einrichten und konfigurieren

Usage: agentnn setup [preset] [options]

PRESETS:
  dev                   Vollständige Entwicklungsumgebung (default)
  ci                    CI/CD Pipeline Setup  
  minimal               Nur Python-Umgebung
  mcp                   MCP Services fokussiert
  full                  Komplettes System mit allen Features

OPTIONS:
  --auto-install        Abhängigkeiten automatisch installieren
  --with-sudo           Installation mit sudo-Rechten
  --no-frontend         Frontend-Build überspringen
  --no-docker           Docker-Setup überspringen  
  --no-mcp              MCP-Services überspringen
  --recover             Fehlgeschlagenes Setup fortsetzen
  --clean-first         Umgebung vor Setup bereinigen

BEISPIELE:
  agentnn setup                           # Interaktives Setup
  agentnn setup dev --auto-install       # Automatisches Dev-Setup
  agentnn setup mcp --with-sudo          # MCP-Setup mit sudo
  agentnn setup --recover                # Setup nach Fehler fortsetzen

EOF
            ;;
        start)
            cat << EOF
${CYAN}agentnn start${NC} - Services starten

Usage: agentnn start [service] [options]

SERVICES:
  all                   Alle Services (default)
  standard              Standard-Services (API, Frontend, DB)
  mcp                   MCP-Services 
  api                   Nur API Gateway
  frontend              Nur Frontend
  database              Nur Datenbank-Services
  <service-name>        Spezifischer Service

OPTIONS:
  --build               Services vor Start neu bauen
  --wait                Warten bis Services bereit sind
  --health-check        Health-Check nach Start durchführen
  --env ENVIRONMENT     Umgebung (dev|staging|prod)
  --detach              Im Hintergrund starten

BEISPIELE:
  agentnn start                           # Alle Services starten
  agentnn start mcp --build              # MCP Services neu bauen und starten
  agentnn start api --wait               # API starten und auf Bereitschaft warten
  agentnn start --env staging            # Services in Staging-Umgebung

EOF
            ;;
        status)
            cat << EOF
${CYAN}agentnn status${NC} - System-Status anzeigen

Usage: agentnn status [options] [components]

COMPONENTS:
  system                System-Ressourcen
  docker                Docker-Services
  mcp                   MCP-Services
  services              Standard-Services
  frontend              Frontend-Status
  database              Datenbank-Status
  network               Netzwerk-Status

OPTIONS:
  --watch               Live-Monitoring (aktualisiert automatisch)
  --interval SECONDS    Update-Intervall für Watch-Modus (default: 5)
  --format FORMAT       Ausgabeformat (table|json|dashboard|summary)
  --no-health           Health-Checks überspringen
  --save                Status-Report speichern

BEISPIELE:
  agentnn status                          # Standard Status-Übersicht
  agentnn status --watch                  # Live-Monitoring
  agentnn status --format json           # JSON-Output
  agentnn status docker mcp              # Nur Docker und MCP Status

EOF
            ;;
        test)
            cat << EOF
${CYAN}agentnn test${NC} - Tests ausführen

Usage: agentnn test [category] [options]

KATEGORIEN:
  unit                  Unit Tests (default)
  integration           Integration Tests
  e2e                   End-to-End Tests
  api                   API Tests
  frontend              Frontend Tests
  mcp                   MCP Tests
  performance           Performance Tests
  security              Security Tests
  all                   Alle Tests
  fast                  Nur schnelle Tests

OPTIONS:
  --coverage            Code-Coverage aktivieren
  --verbose             Ausführliche Test-Ausgabe
  --parallel            Tests parallel ausführen
  --filter PATTERN      Nur Tests mit Pattern ausführen
  --save-artifacts      Test-Artefakte speichern
  --no-cleanup          Test-Umgebung nicht bereinigen

BEISPIELE:
  agentnn test                            # Unit Tests ausführen
  agentnn test all --coverage            # Alle Tests mit Coverage
  agentnn test e2e --verbose             # E2E Tests mit Details
  agentnn test --filter "test_api*"      # Nur API Tests

EOF
            ;;
        doctor)
            cat << EOF
${CYAN}agentnn doctor${NC} - Systemdiagnose durchführen

Usage: agentnn doctor [options] [checks]

CHECKS:
  system                System-Abhängigkeiten
  python                Python-Umgebung
  docker                Docker-Setup
  services              Service-Status
  configuration         Konfigurationsdateien
  permissions           Dateiberechtigungen
  network               Netzwerk-Konnektivität

OPTIONS:
  --fix                 Probleme automatisch beheben
  --deep                Tiefgehende Diagnose
  --report              Detaillierten Report erstellen
  --no-network          Netzwerk-Checks überspringen

BEISPIELE:
  agentnn doctor                          # Vollständige Diagnose
  agentnn doctor --fix                    # Diagnose mit automatischer Reparatur
  agentnn doctor python docker          # Nur Python und Docker prüfen
  agentnn doctor --deep --report         # Tiefgehende Diagnose mit Report

EOF
            ;;
        *)
            echo "Keine detaillierte Hilfe für '$command' verfügbar."
            echo "Verwende 'agentnn help' für eine Übersicht aller Kommandos."
            ;;
    esac
}

# Version und Build-Informationen
show_version() {
    echo "${CYAN}Agent-NN CLI${NC} v${CLI_VERSION}"
    echo
    echo "Build-Informationen:"
    echo "  Repository: $(git remote get-url origin 2>/dev/null || echo 'Unbekannt')"
    echo "  Branch: $(git branch --show-current 2>/dev/null || echo 'Unbekannt')"
    echo "  Commit: $(git rev-parse --short HEAD 2>/dev/null || echo 'Unbekannt')"
    echo "  Build-Zeit: $(date)"
    echo
    echo "System-Informationen:"
    echo "  OS: $(uname -s) $(uname -r)"
    echo "  Architektur: $(uname -m)"
    echo "  Shell: $SHELL"
    echo "  Benutzer: $USER"
    echo
    
    # Verfügbare Tools
    local tools=(python3 node docker poetry npm)
    echo "Verfügbare Tools:"
    for tool in "${tools[@]}"; do
        if command -v "$tool" >/dev/null; then
            local version
            case "$tool" in
                python3) version=$(python3 --version 2>/dev/null | cut -d' ' -f2) ;;
                node) version=$(node --version 2>/dev/null) ;;
                docker) version=$(docker --version 2>/dev/null | cut -d' ' -f3 | tr -d ',') ;;
                poetry) version=$(poetry --version 2>/dev/null | cut -d' ' -f3) ;;
                npm) version=$(npm --version 2>/dev/null) ;;
                *) version="verfügbar" ;;
            esac
            printf "  ✅ %-8s %s\n" "$tool" "$version"
        else
            printf "  ❌ %-8s nicht verfügbar\n" "$tool"
        fi
    done
}

# Setup-Kommando
cmd_setup() {
    local preset="${1:-}"
    shift || true
    
    local setup_args=()
    
    # Preset verarbeiten
    if [[ -n "$preset" ]] && [[ "$preset" != --* ]]; then
        setup_args+=("--preset" "$preset")
    fi
    
    # Weitere Argumente weiterleiten
    setup_args+=("$@")
    
    log_info "Führe Setup aus mit Argumenten: ${setup_args[*]}"
    exec "$SCRIPT_DIR/setup.sh" "${setup_args[@]}"
}

# Start-Kommando
cmd_start() {
    local service="${1:-all}"
    shift || true
    
    case "$service" in
        all)
            exec "$SCRIPT_DIR/setup.sh" --preset dev --auto-install "$@"
            ;;
        standard)
            exec "$SCRIPT_DIR/start_docker.sh" "$@"
            ;;
        mcp)
            exec "$SCRIPT_DIR/start_mcp.sh" start "$@"
            ;;
        api|frontend|database)
            log_warn "Spezifische Service-Namen noch nicht implementiert"
            exec "$SCRIPT_DIR/start_docker.sh" "$@"
            ;;
        *)
            log_err "Unbekannter Service: $service"
            exit 1
            ;;
    esac
}

# Stop-Kommando
cmd_stop() {
    local service="${1:-all}"
    shift || true
    
    case "$service" in
        all)
            "$SCRIPT_DIR/start_mcp.sh" stop "$@" 2>/dev/null || true
            # Standard services stoppen
            if [[ -f "$REPO_ROOT/docker-compose.yml" ]]; then
                cd "$REPO_ROOT" && docker compose down "$@" 2>/dev/null || true
            fi
            ;;
        mcp)
            exec "$SCRIPT_DIR/start_mcp.sh" stop "$@"
            ;;
        standard)
            if [[ -f "$REPO_ROOT/docker-compose.yml" ]]; then
                cd "$REPO_ROOT" && exec docker compose down "$@"
            else
                log_err "docker-compose.yml nicht gefunden"
                exit 1
            fi
            ;;
        *)
            log_err "Unbekannter Service: $service"
            exit 1
            ;;
    esac
}

# Restart-Kommando
cmd_restart() {
    local service="${1:-all}"
    shift || true
    
    log_info "Starte Services neu: $service"
    cmd_stop "$service" "$@"
    sleep 2
    cmd_start "$service" "$@"
}

# Status-Kommando
cmd_status() {
    exec "$SCRIPT_DIR/status.sh" "$@"
}

# Test-Kommando
cmd_test() {
    exec "$SCRIPT_DIR/test.sh" "$@"
}

# Validate-Kommando
cmd_validate() {
    exec "$SCRIPT_DIR/validate.sh" "$@"
}

# Repair-Kommando
cmd_repair() {
    exec "$SCRIPT_DIR/repair_env.sh" "$@"
}

# Logs-Kommando
cmd_logs() {
    local service="${1:-}"
    shift || true
    
    if [[ -z "$service" ]]; then
        log_err "Service-Name erforderlich für Logs"
        echo "Verwendung: agentnn logs <service> [optionen]"
        echo "Services: mcp, api, frontend, database, all"
        exit 1
    fi
    
    case "$service" in
        mcp)
            exec "$SCRIPT_DIR/start_mcp.sh" logs "$@"
            ;;
        all)
            # Zeige Logs aller verfügbaren Services
            if [[ -f "$REPO_ROOT/docker-compose.yml" ]]; then
                cd "$REPO_ROOT" && docker compose logs "$@"
            fi
            ;;
        *)
            # Versuche spezifischen Service
            if [[ -f "$REPO_ROOT/docker-compose.yml" ]]; then
                cd "$REPO_ROOT" && docker compose logs "$service" "$@"
            else
                log_err "Service '$service' nicht gefunden"
                exit 1
            fi
            ;;
    esac
}

# Clean-Kommando
cmd_clean() {
    local clean_args=("$@")
    
    log_info "Bereinige Entwicklungsumgebung..."
    
    # Clean mit setup.sh --clean
    exec "$SCRIPT_DIR/setup.sh" --clean "${clean_args[@]}"
}

# Deploy-Kommando
cmd_deploy() {
    local target="${1:-local}"
    shift || true
    
    case "$target" in
        local)
            log_info "Lokales Deployment..."
            cmd_setup full --auto-install "$@"
            ;;
        staging|production)
            log_err "Deployment für $target noch nicht implementiert"
            exit 1
            ;;
        *)
            log_err "Unbekanntes Deployment-Ziel: $target"
            exit 1
            ;;
    esac
}

# Config-Kommando
cmd_config() {
    local action="${1:-show}"
    shift || true
    
    case "$action" in
        show)
            echo "=== Aktuelle Konfiguration ==="
            if [[ -f "$REPO_ROOT/.env" ]]; then
                echo "📄 .env Datei:"
                grep -v '^#' "$REPO_ROOT/.env" | grep -v '^$' || echo "  (leer)"
            else
                echo "❌ .env Datei nicht gefunden"
            fi
            
            echo
            if [[ -f "$REPO_ROOT/.agentnn/config.json" ]]; then
                echo "📄 Agent-NN Konfiguration:"
                cat "$REPO_ROOT/.agentnn/config.json" | head -20
            else
                echo "❌ Agent-NN Konfiguration nicht gefunden"
            fi
            ;;
        edit)
            local editor="${EDITOR:-nano}"
            if [[ -f "$REPO_ROOT/.env" ]]; then
                "$editor" "$REPO_ROOT/.env"
            else
                log_err ".env Datei nicht gefunden"
                exit 1
            fi
            ;;
        reset)
            if [[ -f "$REPO_ROOT/.env.example" ]]; then
                cp "$REPO_ROOT/.env.example" "$REPO_ROOT/.env"
                log_ok "Konfiguration aus .env.example zurückgesetzt"
            else
                log_err ".env.example nicht gefunden"
                exit 1
            fi
            ;;
        validate)
            exec "$SCRIPT_DIR/validate.sh" config "$@"
            ;;
        *)
            log_err "Unbekannte Config-Aktion: $action"
            echo "Verfügbare Aktionen: show, edit, reset, validate"
            exit 1
            ;;
    esac
}

# Doctor-Kommando (kombiniert validate und repair)
cmd_doctor() {
    local doctor_args=("$@")
    local fix_mode=false
    
    # Check für --fix Flag
    for arg in "${doctor_args[@]}"; do
        if [[ "$arg" == "--fix" ]]; then
            fix_mode=true
            break
        fi
    done
    
    log_info "🔍 Führe Systemdiagnose durch..."
    
    # Erst Validierung
    if "$SCRIPT_DIR/validate.sh" --detailed "${doctor_args[@]}"; then
        log_ok "✅ System ist gesund - keine Probleme gefunden"
    else
        log_warn "⚠️ Probleme erkannt"
        
        if [[ "$fix_mode" == "true" ]]; then
            log_info "🔧 Starte automatische Reparatur..."
            exec "$SCRIPT_DIR/repair_env.sh" --auto "${doctor_args[@]}"
        else
            echo
            echo "💡 Führe 'agentnn doctor --fix' aus für automatische Reparatur"
            echo "💡 Oder 'agentnn repair' für manuelle Reparatur-Optionen"
            exit 1
        fi
    fi
}

# Hauptfunktion
main() {
    # Globale Optionen verarbeiten
    local verbose=false
    local quiet=false
    local dry_run=false
    local yes_mode=false
    local config_file=""
    
    # Parse globale Optionen
    local args=()
    while [[ $# -gt 0 ]]; do
        case $1 in
            --verbose|-v)
                verbose=true
                export DEBUG=1
                shift
                ;;
            --quiet|-q)
                quiet=true
                shift
                ;;
            --dry-run)
                dry_run=true
                export DRY_RUN=1
                shift
                ;;
            --yes|-y)
                yes_mode=true
                export AUTO_MODE=true
                shift
                ;;
            --config)
                config_file="$2"
                shift 2
                ;;
            --help|-h)
                if [[ ${#args[@]} -eq 0 ]]; then
                    usage
                    exit 0
                else
                    show_command_help "${args[0]}"
                    exit 0
                fi
                ;;
            *)
                args+=("$1")
                shift
                ;;
        esac
    done
    
    # Konfigurationsdatei laden falls angegeben
    if [[ -n "$config_file" && -f "$config_file" ]]; then
        source "$config_file"
    fi
    
    # Mindestens ein Kommando erforderlich
    if [[ ${#args[@]} -eq 0 ]]; then
        usage
        exit 1
    fi
    
    local command="${args[0]}"
    local command_args=("${args[@]:1}")
    
    # Kommando ausführen
    case "$command" in
        setup)
            cmd_setup "${command_args[@]}"
            ;;
        start)
            cmd_start "${command_args[@]}"
            ;;
        stop)
            cmd_stop "${command_args[@]}"
            ;;
        restart)
            cmd_restart "${command_args[@]}"
            ;;
        status)
            cmd_status "${command_args[@]}"
            ;;
        test)
            cmd_test "${command_args[@]}"
            ;;
        validate)
            cmd_validate "${command_args[@]}"
            ;;
        repair)
            cmd_repair "${command_args[@]}"
            ;;
        logs)
            cmd_logs "${command_args[@]}"
            ;;
        clean)
            cmd_clean "${command_args[@]}"
            ;;
        deploy)
            cmd_deploy "${command_args[@]}"
            ;;
        config)
            cmd_config "${command_args[@]}"
            ;;
        doctor)
            cmd_doctor "${command_args[@]}"
            ;;
        version)
            show_version
            ;;
        help)
            if [[ ${#command_args[@]} -gt 0 ]]; then
                show_command_help "${command_args[0]}"
            else
                usage
            fi
            ;;
        *)
            log_err "Unbekanntes Kommando: $command"
            echo "Verwende 'agentnn help' für eine Übersicht aller Kommandos."
            exit 1
            ;;
    esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
