version: '3.8'

services:
  # Backend API server
  api:
    build:
      context: .
      dockerfile: Dockerfile.api
    container_name: agent-nn-api
    ports:
      - "8000:8000"
    volumes:
      - ./monitoring/api:/app/monitoring/api
      - ./data:/app/data
      - ./logs:/app/logs
    environment:
      - PYTHONUNBUFFERED=1
      - LOG_LEVEL=INFO
      - ENABLE_CORS=true
      - MAX_WORKERS=4
      - ALLOW_ORIGINS=http://localhost:3000,http://dashboard:3000
      - API_TOKEN_SECRET=your_secret_key_here
      - API_TOKEN_ALGORITHM=HS256
      - API_TOKEN_EXPIRY=86400
    restart: unless-stopped
    networks:
      - agent-nn-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Frontend dashboard
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
    container_name: agent-nn-dashboard
    ports:
      - "3000:3000"
    volumes:
      - ./monitoring/dashboard:/app
      - /app/node_modules  # Exclude node_modules from volume mounting
    environment:
      - NODE_ENV=development
      - REACT_APP_API_URL=http://api:8000
      - REACT_APP_USE_MOCK_DATA=false
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - agent-nn-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Redis for caching and message broker
  redis:
    image: redis:7-alpine
    container_name: agent-nn-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: ["redis-server", "--appendonly", "yes"]
    restart: unless-stopped
    networks:
      - agent-nn-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database for storing configurations and logs
  postgres:
    image: postgres:15-alpine
    container_name: agent-nn-postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=agent_nn
      - POSTGRES_PASSWORD=secure_password
      - POSTGRES_DB=agent_nn_db
    restart: unless-stopped
    networks:
      - agent-nn-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U agent_nn -d agent_nn_db"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Vector database for semantic search
  weaviate:
    image: semitechnologies/weaviate:1.21.2
    container_name: agent-nn-weaviate
    ports:
      - "8080:8080"
    environment:
      - QUERY_DEFAULTS_LIMIT=20
      - AUTHENTICATION_ANONYMOUS_ACCESS_ENABLED=true
      - PERSISTENCE_DATA_PATH=/var/lib/weaviate
      - DEFAULT_VECTORIZER_MODULE=text2vec-transformers
      - TRANSFORMERS_INFERENCE_API=http://t2v-transformers:8080
      - ENABLE_MODULES=text2vec-transformers
    volumes:
      - weaviate-data:/var/lib/weaviate
    depends_on:
      - t2v-transformers
    restart: unless-stopped
    networks:
      - agent-nn-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/v1/.well-known/ready"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Transformers module for weaviate
  t2v-transformers:
    image: semitechnologies/transformers-inference:sentence-transformers-all-MiniLM-L6-v2
    container_name: agent-nn-t2v
    environment:
      - ENABLE_CUDA=0
    restart: unless-stopped
    networks:
      - agent-nn-network

  # Monitoring with Prometheus and Grafana
  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: agent-nn-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - agent-nn-network

  grafana:
    image: grafana/grafana:10.0.3
    container_name: agent-nn-grafana
    ports:
      - "3001:3000"
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - agent-nn-network

volumes:
  redis-data:
  postgres-data:
  weaviate-data:
  prometheus-data:
  grafana-data:

networks:
  agent-nn-network:
    driver: bridge
