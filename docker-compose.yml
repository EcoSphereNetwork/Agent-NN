version: '3.8'
services:
  api_gateway:
    build:
      context: .
      dockerfile: Dockerfile
    command: python api_gateway/main.py
    restart: unless-stopped
    env_file: .env
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health" ]
      interval: 30s
      retries: 5
    ports:
      - "8000:8000"
    depends_on:
      - dispatcher

  dispatcher:
    build:
      context: .
      dockerfile: Dockerfile
    command: python mcp/task_dispatcher/main.py
    restart: unless-stopped
    env_file: .env
    depends_on:
      - registry
      - session_manager
      - vector_store
      - llm_gateway

  registry:
    build:
      context: .
      dockerfile: Dockerfile
    command: python mcp/agent_registry/main.py
    restart: unless-stopped
    env_file: .env

  session_manager:
    build:
      context: .
      dockerfile: Dockerfile
    command: python mcp/session_manager/main.py
    restart: unless-stopped
    env_file: .env
    depends_on:
      - redis

  vector_store:
    build:
      context: .
      dockerfile: Dockerfile
    command: python mcp/vector_store/main.py
    restart: unless-stopped
    env_file: .env
    volumes:
      - vector_data:/data

  llm_gateway:
    build:
      context: .
      dockerfile: Dockerfile
    command: python mcp/llm_gateway/main.py
    restart: unless-stopped
    env_file: .env

  worker_dev:
    build:
      context: .
      dockerfile: Dockerfile
    command: python mcp/worker_dev/main.py
    restart: unless-stopped
    env_file: .env

  worker_openhands:
    build:
      context: .
      dockerfile: Dockerfile
    command: python mcp/worker_openhands/main.py
    restart: unless-stopped
    env_file: .env

  worker_loh:
    build:
      context: .
      dockerfile: Dockerfile
    command: python mcp/worker_loh/main.py
    restart: unless-stopped
    env_file: .env

  frontend:
    image: nginx:alpine
    restart: unless-stopped
    volumes:
      - ./frontend/dist:/usr/share/nginx/html:ro
      - ./frontend/nginx.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "3000:80"
    depends_on:
      - api_gateway

  redis:
    image: redis:7
    restart: unless-stopped
    ports:
      - "6379:6379"

  db:
    image: postgres:14
    restart: unless-stopped
    env_file: .env
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  prometheus:
    image: prom/prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro

volumes:
  vector_data:
  postgres_data:

