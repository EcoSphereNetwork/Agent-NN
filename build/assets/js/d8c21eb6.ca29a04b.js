"use strict";(self.webpackChunkagent_nn_docs=self.webpackChunkagent_nn_docs||[]).push([[7050],{3023:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(3696);const s={},c=r.createContext(s);function o(e){const n=r.useContext(c);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(c.Provider,{value:n},e.children)}},3337:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"architecture/system_architecture","title":"System Architecture","description":"The MCP version of Agent-NN is composed of several cooperating services. The following diagram illustrates the overall flow.","source":"@site/docs/architecture/system_architecture.md","sourceDirName":"architecture","slug":"/architecture/system_architecture","permalink":"/Agent-NN/architecture/system_architecture","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var s=t(2540),c=t(3023);const o={},i="System Architecture",a={},l=[{value:"Components",id:"components",level:3}];function h(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"system-architecture",children:"System Architecture"})}),"\n",(0,s.jsx)(n.p,{children:"The MCP version of Agent-NN is composed of several cooperating services. The following diagram illustrates the overall flow."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"graph TD\n    A[User/CLI] --\x3e B[API Gateway]\n    B --\x3e C[Task Dispatcher]\n    B --\x3e U[User Manager]\n    C --\x3e D[Agent Registry]\n    C --\x3e E[Session Manager]\n    C --\x3e F[Worker Services]\n    C --\x3e G[Vector Store]\n    C --\x3e H[LLM Gateway]\n    F --\x3e G\n    F --\x3e H\n"})}),"\n",(0,s.jsx)(n.h3,{id:"components",children:"Components"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Task Dispatcher"}),": central orchestrator that selects the right worker for each task."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Agent Registry"}),": database of all available worker services."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Session Manager"}),": stores ongoing conversation context."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Worker Services"}),": execute domain specific actions."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Vector Store"}),": semantic search across documentation and code."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"LLM Gateway"}),": unified access to language models."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"User Manager"}),": manages user accounts and tokens."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"API Gateway"}),": optional entry point with authentication and routing."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This setup replaces the former SupervisorAgent architecture and enables independent scaling of each service."})]})}function d(e={}){const{wrapper:n}={...(0,c.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}}}]);