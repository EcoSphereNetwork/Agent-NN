"use strict";(self.webpackChunkagent_nn_docs=self.webpackChunkagent_nn_docs||[]).push([[867],{1186:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>a,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"development/plugins","title":"Service Plugins","description":"The MCP architecture will support pluggable service components. Planned plugin types include:","source":"@site/docs/development/plugins.md","sourceDirName":"development","slug":"/development/plugins","permalink":"/Agent-NN/development/plugins","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var i=t(2540),r=t(3023);const l={},c="Service Plugins",o={},d=[{value:"Directory Structure",id:"directory-structure",level:2}];function u(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"service-plugins",children:"Service Plugins"})}),"\n",(0,i.jsx)(n.p,{children:"The MCP architecture will support pluggable service components. Planned plugin types include:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Tools"})," \u2013 extend worker capabilities with external APIs"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Chains"})," \u2013 compose multiple LLM calls"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Hooks"})," \u2013 intercept messages or add custom logic"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["These plugins can be loaded by services at startup. Details will be defined in ",(0,i.jsx)(n.code,{children:"ROADMAP_NEXT.md"}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"directory-structure",children:"Directory Structure"}),"\n",(0,i.jsxs)(n.p,{children:["Plugins live under the top level ",(0,i.jsx)(n.code,{children:"plugins/"})," folder. Each plugin resides in its\nown sub directory:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"plugins/\n  <tool_name>/\n    plugin.py        # implementation\n    manifest.yaml    # metadata (name, version, summary)\n"})}),"\n",(0,i.jsxs)(n.p,{children:["The plugin must expose a class ",(0,i.jsx)(n.code,{children:"Plugin"})," that implements\n",(0,i.jsx)(n.code,{children:"ToolPlugin.execute(input: dict, context: dict) -> dict"}),".\nServices use ",(0,i.jsx)(n.code,{children:"PluginManager"})," to discover available tools at runtime."]})]})}function a(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},3023:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>c});var s=t(3696);const i={},r=s.createContext(i);function l(e){const n=s.useContext(r);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);