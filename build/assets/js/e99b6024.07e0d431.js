"use strict";(self.webpackChunkagent_nn_docs=self.webpackChunkagent_nn_docs||[]).push([[7740],{3023:(e,s,n)=>{n.d(s,{R:()=>i,x:()=>o});var t=n(3696);const r={},c=t.createContext(r);function i(e){const s=t.useContext(c);return t.useMemo(function(){return"function"==typeof e?e(s):{...s,...e}},[s,e])}function o(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),t.createElement(c.Provider,{value:s},e.children)}},3146:(e,s,n)=>{n.r(s),n.d(s,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"architecture/mcp_components","title":"MCP Components","description":"- Task-Dispatcher: central orchestration service. Decides which worker should execute a task.","source":"@site/docs/architecture/mcp_components.md","sourceDirName":"architecture","slug":"/architecture/mcp_components","permalink":"/Agent-NN/architecture/mcp_components","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var r=n(2540),c=n(3023);const i={},o="MCP Components",a={},l=[{value:"Service Registration",id:"service-registration",level:2}];function d(e){const s={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",strong:"strong",ul:"ul",...(0,c.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(s.header,{children:(0,r.jsx)(s.h1,{id:"mcp-components",children:"MCP Components"})}),"\n",(0,r.jsxs)(s.ul,{children:["\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Task-Dispatcher"}),": central orchestration service. Decides which worker should execute a task."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Agent Registry"}),": stores available worker services, capabilities and health status."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Session Manager"}),": keeps conversation history and temporary state."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Vector Store Service"}),": provides semantic search across documents."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"LLM Gateway"}),": exposes a unified API to various LLM backends."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"User Manager Service"}),": manages user accounts and tokens."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Worker Services"}),": domain specific executors, e.g. Dev, OpenHands, LOH."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"API Gateway"}),": optional entrypoint for external requests with auth and rate limiting."]}),"\n",(0,r.jsxs)(s.li,{children:[(0,r.jsx)(s.strong,{children:"Monitoring/Logging"}),": collects logs and metrics from all services."]}),"\n"]}),"\n",(0,r.jsx)(s.h2,{id:"service-registration",children:"Service Registration"}),"\n",(0,r.jsxs)(s.p,{children:["Worker services announce themselves to the Agent Registry. For local testing the registry loads static data from ",(0,r.jsx)(s.code,{children:"mcp/agents.yaml"}),". Each worker can send a ",(0,r.jsx)(s.code,{children:"POST /register"})," request during startup to appear in the registry. In Phase 1 this process is manual but it prepares automatic discovery for later stages."]})]})}function h(e={}){const{wrapper:s}={...(0,c.R)(),...e.components};return s?(0,r.jsx)(s,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}}}]);