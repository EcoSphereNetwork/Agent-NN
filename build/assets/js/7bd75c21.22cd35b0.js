"use strict";(self.webpackChunkagent_nn_docs=self.webpackChunkagent_nn_docs||[]).push([[8456],{1386:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>d,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"integrations/OpenHands-Flowise-Flow","title":"Flowise-Flow f\xfcr ein 16\u2011Agenten-Team mit OpenHands","description":"Wir erstellen einen Flowise-Workflow, der 16 lokal laufende OpenHands-Agenten (Ports 3001\u20133016) als Spezialisten ansteuert. Neben den bisherigen Rollen wie \u201eFrontend\u201c, \u201eBackend\u201c oder \u201eDokumentation\u201c sind zus\xe4tzliche Experten vertreten. Dazu z\xe4hlen Android\u2011 und iOS\u2011Entwicklung, plattform\xfcbergreifende App-DevOps, Spezialisten f\xfcr neuronale Netze, allgemeines ML/DL sowie LLM\u2011DevOps.","source":"@site/docs/integrations/OpenHands-Flowise-Flow.md","sourceDirName":"integrations","slug":"/integrations/OpenHands-Flowise-Flow","permalink":"/Agent-NN/integrations/OpenHands-Flowise-Flow","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var r=i(2540),t=i(3023);const l={},d="Flowise-Flow f\xfcr ein 16\u2011Agenten-Team mit OpenHands",o={},a=[{value:"Team 2 \u2013 Mobile- und Cross\u2011Plattform\u2011Apps (Ports 3011\u20133020)",id:"team-2--mobile--und-crossplattformapps-ports-30113020",level:3},{value:"Team 3 \u2013 Linux-Distribution und OS-Entwicklung (Ports 3021\u20133030)",id:"team-3--linux-distribution-und-os-entwicklung-ports-30213030",level:3},{value:"Team 4 \u2013 Neuronale Netzwerke f\xfcr Agent\u2011NN (Ports 3031\u20133040)",id:"team-4--neuronale-netzwerke-f\xfcr-agentnn-ports-30313040",level:3},{value:"Team 5 \u2013 ML- &amp; DL-Algorithmen (Ports 3041\u20133050)",id:"team-5--ml---dl-algorithmen-ports-30413050",level:3},{value:"Setup",id:"setup",level:2}];function c(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"flowise-flow-f\xfcr-ein-16agenten-team-mit-openhands",children:"Flowise-Flow f\xfcr ein 16\u2011Agenten-Team mit OpenHands"})}),"\n",(0,r.jsx)(n.p,{children:"Wir erstellen einen Flowise-Workflow, der 16 lokal laufende OpenHands-Agenten (Ports 3001\u20133016) als Spezialisten ansteuert. Neben den bisherigen Rollen wie \u201eFrontend\u201c, \u201eBackend\u201c oder \u201eDokumentation\u201c sind zus\xe4tzliche Experten vertreten. Dazu z\xe4hlen Android\u2011 und iOS\u2011Entwicklung, plattform\xfcbergreifende App-DevOps, Spezialisten f\xfcr neuronale Netze, allgemeines ML/DL sowie LLM\u2011DevOps."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Agenten\xfcbersicht:"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Frontend Engineer"}),"\n",(0,r.jsx)(n.li,{children:"Backend Engineer"}),"\n",(0,r.jsx)(n.li,{children:"DevOps Specialist"}),"\n",(0,r.jsx)(n.li,{children:"Security Analyst"}),"\n",(0,r.jsx)(n.li,{children:"QA Tester"}),"\n",(0,r.jsx)(n.li,{children:"Technical Writer"}),"\n",(0,r.jsx)(n.li,{children:"Code Reviewer"}),"\n",(0,r.jsx)(n.li,{children:"Release Manager"}),"\n",(0,r.jsx)(n.li,{children:"Performance Optimizer"}),"\n",(0,r.jsx)(n.li,{children:"UX Designer"}),"\n",(0,r.jsx)(n.li,{children:"Android App DevOps"}),"\n",(0,r.jsx)(n.li,{children:"iOS App DevOps"}),"\n",(0,r.jsx)(n.li,{children:"Cross\u2011Platform App DevOps"}),"\n",(0,r.jsx)(n.li,{children:"Neural Network Expert"}),"\n",(0,r.jsx)(n.li,{children:"ML/DL Expert"}),"\n",(0,r.jsx)(n.li,{children:"LLM DevOps"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Neben diesem Grund-Setup existieren vier zus\xe4tzliche Workflows, die jeweils ein\nSpezialistenteam ansprechen:"}),"\n",(0,r.jsx)(n.h3,{id:"team-2--mobile--und-crossplattformapps-ports-30113020",children:"Team 2 \u2013 Mobile- und Cross\u2011Plattform\u2011Apps (Ports 3011\u20133020)"}),"\n",(0,r.jsxs)(n.p,{children:["Der Flow ",(0,r.jsx)(n.code,{children:"openhands_app.json"})," b\xfcndelt zehn Agenten f\xfcr mobile Entwicklung:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Android App DevOps"}),"\n",(0,r.jsx)(n.li,{children:"iOS App DevOps"}),"\n",(0,r.jsx)(n.li,{children:"Crossplatform App DevOps"}),"\n",(0,r.jsx)(n.li,{children:"Mobile Security Analyst"}),"\n",(0,r.jsx)(n.li,{children:"Mobile QA Tester"}),"\n",(0,r.jsx)(n.li,{children:"API Integration Engineer"}),"\n",(0,r.jsx)(n.li,{children:"Mobile Performance Optimizer"}),"\n",(0,r.jsx)(n.li,{children:"App Release Manager"}),"\n",(0,r.jsx)(n.li,{children:"Mobile UX Designer"}),"\n",(0,r.jsx)(n.li,{children:"Desktop Compatibility Engineer"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"team-3--linux-distribution-und-os-entwicklung-ports-30213030",children:"Team 3 \u2013 Linux-Distribution und OS-Entwicklung (Ports 3021\u20133030)"}),"\n",(0,r.jsxs)(n.p,{children:["Im Workflow ",(0,r.jsx)(n.code,{children:"openhands_linux.json"})," arbeiten zehn Experten am Aufbau eines\neigenen Linux-Betriebssystems:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Kernel Engineer"}),"\n",(0,r.jsx)(n.li,{children:"Package Maintainer"}),"\n",(0,r.jsx)(n.li,{children:"Desktop Environment Developer"}),"\n",(0,r.jsx)(n.li,{children:"Installer Engineer"}),"\n",(0,r.jsx)(n.li,{children:"Driver Integration Specialist"}),"\n",(0,r.jsx)(n.li,{children:"Security Engineer"}),"\n",(0,r.jsx)(n.li,{children:"System Services Developer"}),"\n",(0,r.jsx)(n.li,{children:"Build Manager"}),"\n",(0,r.jsx)(n.li,{children:"Documentation Writer"}),"\n",(0,r.jsx)(n.li,{children:"UX Designer"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"team-4--neuronale-netzwerke-f\xfcr-agentnn-ports-30313040",children:"Team 4 \u2013 Neuronale Netzwerke f\xfcr Agent\u2011NN (Ports 3031\u20133040)"}),"\n",(0,r.jsxs)(n.p,{children:["Der neu hinzugef\xfcgte Flow ",(0,r.jsx)(n.code,{children:"openhands_nn.json"})," enth\xe4lt zehn spezialisierte\nAgenten zur Entwicklung neuer neuronaler Netze:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Dataset Curator"}),"\n",(0,r.jsx)(n.li,{children:"Data Preprocessing Specialist"}),"\n",(0,r.jsx)(n.li,{children:"Model Architect"}),"\n",(0,r.jsx)(n.li,{children:"Training Engineer"}),"\n",(0,r.jsx)(n.li,{children:"Hyperparameter Tuner"}),"\n",(0,r.jsx)(n.li,{children:"Evaluation Analyst"}),"\n",(0,r.jsx)(n.li,{children:"Model Compression Expert"}),"\n",(0,r.jsx)(n.li,{children:"Deployment Engineer"}),"\n",(0,r.jsx)(n.li,{children:"MLOps Specialist"}),"\n",(0,r.jsx)(n.li,{children:"Experiment Tracker"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"team-5--ml---dl-algorithmen-ports-30413050",children:"Team 5 \u2013 ML- & DL-Algorithmen (Ports 3041\u20133050)"}),"\n",(0,r.jsxs)(n.p,{children:["Der Workflow ",(0,r.jsx)(n.code,{children:"openhands_mldl.json"})," fokussiert sich auf die Erforschung und Implementierung neuer Lernverfahren. Zehn spezialisierte Agenten bilden dieses Team:"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Algorithm Research Scientist"}),"\n",(0,r.jsx)(n.li,{children:"Novel Model Designer"}),"\n",(0,r.jsx)(n.li,{children:"Optimization Engineer"}),"\n",(0,r.jsx)(n.li,{children:"Reinforcement Learning Specialist"}),"\n",(0,r.jsx)(n.li,{children:"Transfer Learning Expert"}),"\n",(0,r.jsx)(n.li,{children:"AutoML Engineer"}),"\n",(0,r.jsx)(n.li,{children:"Federated Learning Architect"}),"\n",(0,r.jsx)(n.li,{children:"Data Augmentation Specialist"}),"\n",(0,r.jsx)(n.li,{children:"Acceleration Expert"}),"\n",(0,r.jsx)(n.li,{children:"Benchmark Analyst"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Flowise ist ein Open-Source Low\u2011Code-Werkzeug, mit dem man KI\u2011Workflows visuell zusammenstellen kann. OpenHands ist ein Open-Source-Agentensystem, das Entwickleraufgaben per nat\xfcrlicher Sprache ausf\xfchrt. Im Flowise\u2011Flow richten wir folgende Komponenten ein:"}),"\n",(0,r.jsx)(n.h2,{id:"setup",children:"Setup"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Stelle sicher, dass Python 3.10, Docker und Redis installiert sind."}),"\n",(0,r.jsx)(n.li,{children:"Installiere die Basis-Abh\xe4ngigkeiten mit"}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:" pip install -r requirements.txt\n ./install_openhands_deps.sh  # optional\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Alternativ kann ",(0,r.jsx)(n.code,{children:"pip install -r requirements-openhands.txt"})," ausgef\xfchrt werden."]}),"\n",(0,r.jsxs)(n.p,{children:["Die Ports der Agenten lassen sich \xfcber die Umgebungsvariable ",(0,r.jsx)(n.code,{children:"OPENHANDS_AGENT_PORTS"})," steuern (Standard ",(0,r.jsx)(n.code,{children:"3001-3016"}),")."]}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"Starte alle OpenHands-Agenten (Standardports 3001\u20113016) und Flowise."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["In Test- oder CI-Umgebungen ohne Docker kann der OpenHands-API-Server durch\n",(0,r.jsx)(n.code,{children:"tests/mocks/fake_openhands.py"})," simuliert werden. Die zugeh\xf6rigen Tests\n\xfcberspringen fehlende Abh\xe4ngigkeiten automatisch."]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"User-Input-Node:"})," Ein Texteingabe-Node (\u201cUser Prompt\u201d), in dem der Nutzer die Aufgabenbeschreibung eingibt (z.B. \u201eImplementiere ein Login-Formular in React\u201c). Dieser Text wird als Variable im Flow gespeichert (z.B. in ",(0,r.jsx)(n.code,{children:"state.user_task"}),")."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Auswahl-Node (Dropdown/Checkbox):"})," Ein Auswahl- bzw. Switch-Node, mit dem der Nutzer eine oder mehrere Ziel-Instanzen ausw\xe4hlt (z.B. \u201eFrontend\u201c, \u201eBackend\u201c, \u201eDokumentation\u201c). Dies kann \xfcber ein Dropdown oder Kontrollk\xe4stchen realisiert werden. Die Auswahl wird in einer State-Variable (z.B. ",(0,r.jsx)(n.code,{children:"state.selected_agents"}),") festgehalten."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Entscheidungs- / Bedingungs-Nodes:"})," F\xfcr jede Agenten-Option (Frontend, Backend etc.) f\xfcgen wir einen \u201eCondition\u201c-Node ein. Jeder pr\xfcft etwa, ob der jeweilige Agent in der Auswahl enthalten ist (z.B. Bedingung: ",(0,r.jsx)(n.code,{children:"state.selected_agents"})," enth\xe4lt \u201eFrontend\u201c). Auf \u201eTrue\u201c verzweigt der Flow zu den Tool-Nodes dieses Agents. Flowise kann dabei parallele Pfade ausf\xfchren, sodass mehrere Agenten gleichzeitig abgefragt werden k\xf6nnen. In jedem Pfad leiten wir also die Eingabe zur entsprechenden Instanz weiter."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Tool-Nodes (HTTP POST):"})," In jedem aktivierten Zweig verwenden wir einen \u201eRequest\u201c-Tool-Node, der eine POST-Anfrage an die OpenHands-API des jeweiligen Agents sendet. Beispiel: F\xfcr den Frontend-Agenten konfiguriert man einen Request-Node mit URL"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"http://localhost:3001/api/conversations\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Methode ",(0,r.jsx)(n.code,{children:"POST"}),". Im HTTP-Header tr\xe4gt man falls n\xf6tig einen Autorisierungs-Token ein (z.B. ",(0,r.jsx)(n.code,{children:"Authorization: Bearer <token>"}),") sowie ",(0,r.jsx)(n.code,{children:"Content-Type: application/json"}),". Der JSON-Body enth\xe4lt mindestens das Feld ",(0,r.jsx)(n.code,{children:"initial_user_msg"})," mit der Nutzeraufgabe. Beispiel-Body:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "initial_user_msg": "{{state.user_task}}"\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["(",(0,r.jsx)(n.code,{children:"{{state.user_task}}"})," steht hier f\xfcr die vom Nutzer eingegebene Aufgabenbeschreibung.) Dies entspricht dem OpenHands-API-Standard zum Starten einer neuen Konversation. Die Antwort enth\xe4lt u.a. eine ",(0,r.jsx)(n.code,{children:"conversation_id"}),", die wir per ",(0,r.jsx)(n.strong,{children:"Set-Variable-Node"})," speichern (z.B. in ",(0,r.jsx)(n.code,{children:"state.conversation_id"}),"). (Beispiel-Antwort: ",(0,r.jsx)(n.code,{children:'{"status":"ok","conversation_id":"abc1234"}'}),".)"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Tool-Nodes (HTTP GET Trajectory):"})," Nachdem die Konversation gestartet ist, holen wir mit einem weiteren Request-Node die Ergebnisse ab. Dazu senden wir eine GET-Anfrage an"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"http://localhost:3001/api/conversations/{conversation_id}/trajectory\n"})}),"\n",(0,r.jsxs)(n.p,{children:["(Port passend zur Instanz). Wir f\xfcgen denselben Autorisierungs-Header ein. Die Antwort liefert die Aktions-Trajektorie des Agenten in JSON-Form (Feld ",(0,r.jsx)(n.code,{children:"trajectory"}),"). Beispiel (vereinfacht):"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "trajectory": [\n    { /* Aktion 1 */ },\n    { /* Aktion 2 */ }\n  ]\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"Dies entspricht dem Dokumentationsbeispiel f\xfcr den Trajectory-Endpoint."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Tool-Nodes (GET List-Files und Select-File):"})," Optional kann man nach Abschluss der Aufgaben auch die produzierten Dateien abrufen. Mit ",(0,r.jsx)(n.code,{children:"GET /api/conversations/{id}/list-files"})," bekommen wir ein JSON-Array mit Dateipfaden. Beispiel:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'curl -X GET "http://localhost:3001/api/conversations/abc1234/list-files"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["liefert etwa ",(0,r.jsx)(n.code,{children:'["/workspace/log.txt","/workspace/output/result.json"]'}),". Anschlie\xdfend kann man mit ",(0,r.jsx)(n.code,{children:"GET /api/conversations/{id}/select-file?file=<pfad>"})," den Inhalt einer bestimmten Datei auslesen. Beispiel:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'curl -X GET "http://localhost:3001/api/conversations/abc1234/select-file?file=/workspace/log.txt"\n'})}),"\n",(0,r.jsxs)(n.p,{children:["Dies liefert etwa ",(0,r.jsx)(n.code,{children:'{"code":"<Inhalt der Datei>"}'}),". Die Flie\xdftext-Antworten (Ergebnis-Log, Code-Log) lassen sich dann im Flowise-Output-Node anzeigen."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Ausgabe-Node:"})," Schlie\xdflich b\xfcndeln wir die Ergebnisse f\xfcr den Nutzer. Ein \u201cText Output\u201d-Node (bzw. der Assistant-Output) zeigt die Agentenantworten, Logs oder Datei-Inhalte an. Man k\xf6nnte z.B. die JSON-Antworten formatieren oder einfach den Textinhalt der Logdatei direkt ausgeben."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:["Die gesamte Logik sieht so aus: Nutzer gibt Aufgabe und Agenten-Auswahl ein. Anhand der Auswahl verzweigt Flowise in parallele Teil-Flows: Jeder aktivierte Teil ruft das jeweilige OpenHands-Agenten-API auf (mittels Flowise-Tools) und holt Trajektorie bzw. Ergebnisse ab. In Flowise geschieht die HTTP-Anfrage \xfcber die ",(0,r.jsx)(n.strong,{children:"Request-Tool-Nodes"})," (GET/POST). Zum Beispiel w\xe4hlt der Flowise-Agent bei einer GET-Anfrage den \u201eGET-Tool\u201c aus und sendet sie an den konfigurierten Endpunkt. Parallel dazu k\xf6nnen mehrere solcher Tools ausgef\xfchrt werden, um z.B. Frontend- und Backend-Agenten gleichzeitig anzusprechen."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Beispielkonfiguration (Tool-Nodes):"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"POST-Request an OpenHands:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "tool": "Request Post",\n  "method": "POST",\n  "url": "http://localhost:3001/api/conversations",\n  "headers": {\n    "Authorization": "Bearer <API-Token>",\n    "Content-Type": "application/json"\n  },\n  "body": {\n    "initial_user_msg": "{{state.user_task}}"\n  }\n}\n'})}),"\n",(0,r.jsx)(n.p,{children:"(Analog f\xfcr die Ports 3002\u20133016 der anderen Instanzen.) Dieses JSON entspricht dem cURL-Beispiel aus der OpenHands-Doku."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.em,{children:"GET-Request Trajectory:"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "tool": "Request Get",\n  "method": "GET",\n  "url": "http://localhost:3001/api/conversations/{{state.conversation_id}}/trajectory",\n  "headers": {\n    "Authorization": "Bearer <API-Token>"\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.p,{children:["und \xe4hnlich f\xfcr ",(0,r.jsx)(n.code,{children:"/list-files"})," oder ",(0,r.jsx)(n.code,{children:"/select-file"}),". Die Pfade und IDs setzt Flowise durch Platzhalter (",(0,r.jsx)(n.code,{children:"{{state.conversation_id}}"}),") aus der gespeicherten Variable ein."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Set-Variable-Node:"})," Direkt nach jedem POST-Tool-Node nutzen wir einen ",(0,r.jsx)(n.strong,{children:"Set-Variable-Node"}),", um den Wert ",(0,r.jsx)(n.code,{children:"conversation_id"})," aus der Antwort in der State zu sichern. Danach kann jeder nachfolgende GET-Tool-Node diesen State-Wert in der URL verwenden."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.em,{children:"Output-Node:"})," Am Ende jedes Pfades h\xe4ngt ein Ausgabe-Node, der die abgerufenen Texte oder JSON-Felder an den User ausgibt (z.B. Log-Inhalte aus ",(0,r.jsx)(n.code,{children:"select-file"}),")."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Beispiel f\xfcr einen Custom Tool-Node (skalierbar):"})," Man kann auch eine benutzerdefinierte Komponente schreiben, die dynamisch Port/Instanz anspricht. Z.B. ein Custom-Node mit Parameter ",(0,r.jsx)(n.code,{children:"agent_port"})," und ",(0,r.jsx)(n.code,{children:"apiKey"}),", der dann die obige POST-Anfrage an ",(0,r.jsx)(n.code,{children:"http://localhost:${agent_port}/api/conversations"})," f\xfchrt. Pseudocode (Node.js) k\xf6nnte so aussehen:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const fetch = require('node-fetch');\nasync function openHandsRequest(agent_port, apiKey, userTask) {\n  const url = `http://localhost:${agent_port}/api/conversations`;\n  const res = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${apiKey}`,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ initial_user_msg: userTask })\n  });\n  const data = await res.json();\n  // conversation_id in State speichern, etc.\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Ein solcher Custom Tool Node w\xfcrde dann flexibel jeden Agenten-Port ansteuern."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Quellen:"})," Die Konfiguration orientiert sich an der offiziellen OpenHands-API-Dokumentation (z.B. POST\xa0",(0,r.jsx)(n.code,{children:"/api/conversations"})," mit ",(0,r.jsx)(n.code,{children:'"initial_user_msg"'}),", GET\xa0",(0,r.jsx)(n.code,{children:"/trajectory"}),", GET\xa0",(0,r.jsx)(n.code,{children:"/list-files"}),", GET\xa0",(0,r.jsx)(n.code,{children:"/select-file"}),"). Flowise-Tool-Nodes f\xfcr HTTP-Anfragen sind dokumentiert \u2013 der Flowise-Agent w\xe4hlt z.B. ein GET-Tool aus und sendet einen GET-Request an den konfigurierten Endpunkt. Zudem unterst\xfctzt Flowise parallele Branches, sodass mehrere Agenten-Aufrufe simultan ablaufen k\xf6nnen. Alle Konfigurationseinstellungen (URL, Methode, Header, JSON-Body) lassen sich in den Request-Tool-Nodes angeben und verwenden Platzhalter f\xfcr dynamische Werte (z.B. Nutzer-Input und gespeicherte ",(0,r.jsx)(n.code,{children:"conversation_id"}),")."]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},3023:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>d});var s=i(3696);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);