"use strict";(self.webpackChunkagent_nn_docs=self.webpackChunkagent_nn_docs||[]).push([[3636],{2147:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"test_strategy","title":"Test Strategy","description":"This project relies on pytest and pytest-cov for backend tests. Tests are grouped into","source":"@site/docs/test_strategy.md","sourceDirName":".","slug":"/test_strategy","permalink":"/Agent-NN/test_strategy","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var r=s(4848),i=s(8453);const o={},c="Test Strategy",a={},d=[{value:"Markers",id:"markers",level:2},{value:"Agent registry coverage",id:"agent-registry-coverage",level:2},{value:"Supervisor agent coverage",id:"supervisor-agent-coverage",level:2},{value:"Fehlertests / Resilienz",id:"fehlertests--resilienz",level:2},{value:"CLI-Kommandos",id:"cli-kommandos",level:2}];function l(e){const t={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"test-strategy",children:"Test Strategy"})}),"\n",(0,r.jsxs)(t.p,{children:["This project relies on pytest and pytest-cov for backend tests. Tests are grouped into\n",(0,r.jsx)(t.code,{children:"tests/integration"})," for end-to-end flows, ",(0,r.jsx)(t.code,{children:"tests/api"})," for REST routes and ",(0,r.jsx)(t.code,{children:"tests/cli"}),"\nfor the SDK commands. Optional React component tests live in ",(0,r.jsx)(t.code,{children:"tests/ui"})," using vitest."]}),"\n",(0,r.jsxs)(t.p,{children:["Coverage targets are 80% for all core services (",(0,r.jsx)(t.code,{children:"dispatcher"}),", ",(0,r.jsx)(t.code,{children:"session"}),",\n",(0,r.jsx)(t.code,{children:"llm_gateway"}),", ",(0,r.jsx)(t.code,{children:"vector_store"}),", ",(0,r.jsx)(t.code,{children:"routing_agent"}),"). CLI commands and SDK helpers are\ncovered by unit tests with mocks. Regression tests document previously fixed bugs\nsuch as the dispatcher legacy routing fallback."]}),"\n",(0,r.jsxs)(t.p,{children:["Run ",(0,r.jsx)(t.code,{children:"./tests/ci_check.sh"})," locally or via CI which executes ruff, mypy and pytest\nwith coverage output in HTML and JSON format."]}),"\n",(0,r.jsx)(t.h2,{id:"markers",children:"Markers"}),"\n",(0,r.jsxs)(t.p,{children:["All tests are tagged with either ",(0,r.jsx)(t.code,{children:"@pytest.mark.unit"})," or ",(0,r.jsx)(t.code,{children:"@pytest.mark.integration"}),". The default collection\nruns only unit tests unless ",(0,r.jsx)(t.code,{children:"--run-integration"})," is provided. This behavior is implemented in ",(0,r.jsx)(t.code,{children:"tests/conftest.py"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"agent-registry-coverage",children:"Agent registry coverage"}),"\n",(0,r.jsxs)(t.p,{children:["Iteration 3 adds focused unit tests for the ",(0,r.jsx)(t.code,{children:"AgentRegistryService"})," and its API routes. The tests verify\nmetric counters, status handling and persistence of profile updates via the REST interface.\nUsing ",(0,r.jsx)(t.code,{children:"tmp_path"})," ensures profile files are isolated.\nAn extra case validates that requesting an unknown agent increases the metrics counter and that the API responds with ",(0,r.jsx)(t.code,{children:"404"}),"."]}),"\n",(0,r.jsx)(t.h2,{id:"supervisor-agent-coverage",children:"Supervisor agent coverage"}),"\n",(0,r.jsxs)(t.p,{children:["Iteration 3.2 expands the unit tests for the ",(0,r.jsx)(t.code,{children:"SupervisorAgent"}),". New cases\nsimulate a failing worker, verify the returned status for agents without any\nhistory and assert that ",(0,r.jsx)(t.code,{children:"_update_model"})," receives the correct success score for\nboth successful and failed executions. Dummy manager classes keep these tests\nindependent from the rest of the system."]}),"\n",(0,r.jsx)(t.h2,{id:"fehlertests--resilienz",children:"Fehlertests / Resilienz"}),"\n",(0,r.jsx)(t.p,{children:"Iteration 4 focuses on failure scenarios for the plugin agent service. Tests\ncover unknown tool names and invalid plugin inputs so that the service returns\ninformative error messages instead of raising exceptions."}),"\n",(0,r.jsx)(t.h2,{id:"cli-kommandos",children:"CLI-Kommandos"}),"\n",(0,r.jsxs)(t.p,{children:["Iteration 5 f\xfcgt gezielte Tests f\xfcr die Befehlszeile hinzu. Die neuen F\xe4lle\nverifizieren Fehlermeldungen bei ung\xfcltigen Bewertungen und eine korrekte\nAuthentifizierungspr\xfcfung beim Absenden von Feedback. Dazu wird der\n",(0,r.jsx)(t.code,{children:"typer.CliRunner"})," verwendet und HTTP-Aufrufe werden mit Dummy-Objekten\nsimuliert."]})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>c});var n=s(6540);const r={},i=n.createContext(r);function o(e){const t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);