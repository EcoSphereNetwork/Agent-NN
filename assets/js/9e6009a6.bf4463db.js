"use strict";(self.webpackChunkagent_nn_docs=self.webpackChunkagent_nn_docs||[]).push([[8543],{5175:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>a,frontMatter:()=>t,metadata:()=>l,toc:()=>o});const l=JSON.parse('{"id":"development/cicd","title":"CI/CD Pipeline","description":"This document describes the Continuous Integration and Continuous Deployment (CI/CD) pipeline for Agent-NN.","source":"@site/docs/development/cicd.md","sourceDirName":"development","slug":"/development/cicd","permalink":"/Agent-NN/development/cicd","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var s=i(4848),r=i(8453);const t={},c="CI/CD Pipeline",d={},o=[{value:"Overview",id:"overview",level:2},{value:"Pipeline Stages",id:"pipeline-stages",level:2},{value:"1. Test Stage",id:"1-test-stage",level:3},{value:"2. Build Stage",id:"2-build-stage",level:3},{value:"3. Deployment Stages",id:"3-deployment-stages",level:3},{value:"Staging Deployment",id:"staging-deployment",level:4},{value:"Production Deployment",id:"production-deployment",level:4},{value:"Configuration",id:"configuration",level:2},{value:"GitHub Actions",id:"github-actions",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Docker Configuration",id:"docker-configuration",level:3},{value:"Monitoring",id:"monitoring",level:2},{value:"Troubleshooting",id:"troubleshooting",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"Future Improvements",id:"future-improvements",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"cicd-pipeline",children:"CI/CD Pipeline"})}),"\n",(0,s.jsx)(n.p,{children:"This document describes the Continuous Integration and Continuous Deployment (CI/CD) pipeline for Agent-NN."}),"\n",(0,s.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,s.jsx)(n.p,{children:"Our CI/CD pipeline automates the following processes:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Code Quality Checks"}),"\n",(0,s.jsx)(n.li,{children:"Testing"}),"\n",(0,s.jsx)(n.li,{children:"Building"}),"\n",(0,s.jsx)(n.li,{children:"Deployment"}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"pipeline-stages",children:"Pipeline Stages"}),"\n",(0,s.jsx)(n.h3,{id:"1-test-stage",children:"1. Test Stage"}),"\n",(0,s.jsx)(n.p,{children:"The test stage runs on every push and pull request:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"graph TD\n    A[Push/PR] --\x3e B[Install Dependencies]\n    B --\x3e C[Linting]\n    B --\x3e D[Type Checking]\n    B --\x3e E[Unit Tests]\n    C --\x3e F[Upload Coverage]\n    D --\x3e F\n    E --\x3e F\n"})}),"\n",(0,s.jsx)(n.p,{children:"Components:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Linting with ",(0,s.jsx)(n.code,{children:"flake8"}),", ",(0,s.jsx)(n.code,{children:"black"}),", and ",(0,s.jsx)(n.code,{children:"isort"})]}),"\n",(0,s.jsxs)(n.li,{children:["Type checking with ",(0,s.jsx)(n.code,{children:"mypy"})]}),"\n",(0,s.jsxs)(n.li,{children:["Unit tests with ",(0,s.jsx)(n.code,{children:"pytest"})]}),"\n",(0,s.jsxs)(n.li,{children:["Coverage reporting with ",(0,s.jsx)(n.code,{children:"codecov"})]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"2-build-stage",children:"2. Build Stage"}),"\n",(0,s.jsx)(n.p,{children:"The build stage runs on pushes to main and develop branches:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"graph TD\n    A[Push to main/develop] --\x3e B[Build Package]\n    B --\x3e C[Upload Artifact]\n"})}),"\n",(0,s.jsx)(n.p,{children:"Components:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Package building with Poetry"}),"\n",(0,s.jsx)(n.li,{children:"Artifact uploading to GitHub Actions"}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"3-deployment-stages",children:"3. Deployment Stages"}),"\n",(0,s.jsx)(n.h4,{id:"staging-deployment",children:"Staging Deployment"}),"\n",(0,s.jsx)(n.p,{children:"Runs on pushes to the develop branch:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"graph TD\n    A[Push to develop] --\x3e B[Download Artifact]\n    B --\x3e C[Build Docker Image]\n    C --\x3e D[Push to Registry]\n    D --\x3e E[Deploy to Staging]\n"})}),"\n",(0,s.jsx)(n.h4,{id:"production-deployment",children:"Production Deployment"}),"\n",(0,s.jsx)(n.p,{children:"Runs on pushes to the main branch:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"graph TD\n    A[Push to main] --\x3e B[Download Artifact]\n    B --\x3e C[Build Docker Image]\n    C --\x3e D[Push to Registry]\n    D --\x3e E[Deploy to Production]\n"})}),"\n",(0,s.jsx)(n.h2,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsx)(n.h3,{id:"github-actions",children:"GitHub Actions"}),"\n",(0,s.jsxs)(n.p,{children:["The pipeline is configured in ",(0,s.jsx)(n.code,{children:".github/workflows/ci.yml"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",children:"name: CI/CD Pipeline\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main, develop ]\n\njobs:\n  test:\n    # Test job configuration...\n    \n  build:\n    # Build job configuration...\n    \n  deploy-staging:\n    # Staging deployment configuration...\n    \n  deploy-production:\n    # Production deployment configuration...\n"})}),"\n",(0,s.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,s.jsx)(n.p,{children:"Required secrets in GitHub:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DOCKER_USERNAME"}),": Docker Hub username"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"DOCKER_PASSWORD"}),": Docker Hub password"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"STAGING_SSH_KEY"}),": SSH key for staging server"]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"PRODUCTION_SSH_KEY"}),": SSH key for production server"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"docker-configuration",children:"Docker Configuration"}),"\n",(0,s.jsx)(n.p,{children:"Dockerfile for the application:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-dockerfile",children:'FROM python:3.10-slim\n\nWORKDIR /app\n\n# Install Poetry\nRUN pip install poetry\n\n# Copy project files\nCOPY pyproject.toml poetry.lock ./\nCOPY smolit_llm_nn/ ./smolit_llm_nn/\n\n# Install dependencies\nRUN poetry config virtualenvs.create false \\\n    && poetry install --no-dev\n\n# Run application\nCMD ["poetry", "run", "python", "-m", "smolit_llm_nn"]\n'})}),"\n",(0,s.jsx)(n.h2,{id:"monitoring",children:"Monitoring"}),"\n",(0,s.jsx)(n.p,{children:"The pipeline includes several monitoring points:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Test Results:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Unit test results"}),"\n",(0,s.jsx)(n.li,{children:"Coverage reports"}),"\n",(0,s.jsx)(n.li,{children:"Linting issues"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Build Artifacts:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Package versions"}),"\n",(0,s.jsx)(n.li,{children:"Build logs"}),"\n",(0,s.jsx)(n.li,{children:"Docker image tags"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Deployment Status:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Deployment success/failure"}),"\n",(0,s.jsx)(n.li,{children:"Environment health checks"}),"\n",(0,s.jsx)(n.li,{children:"Service metrics"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"troubleshooting",children:"Troubleshooting"}),"\n",(0,s.jsx)(n.p,{children:"Common issues and solutions:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Failed Tests:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Check test logs in GitHub Actions"}),"\n",(0,s.jsxs)(n.li,{children:["Run tests locally: ",(0,s.jsx)(n.code,{children:"poetry run pytest"})]}),"\n",(0,s.jsx)(n.li,{children:"Verify dependencies are up to date"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Build Failures:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Check Poetry build logs"}),"\n",(0,s.jsx)(n.li,{children:"Verify package dependencies"}),"\n",(0,s.jsx)(n.li,{children:"Check Docker build context"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Deployment Issues:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Verify environment variables"}),"\n",(0,s.jsx)(n.li,{children:"Check Docker registry access"}),"\n",(0,s.jsx)(n.li,{children:"Validate deployment configurations"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Branch Protection:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Require PR reviews"}),"\n",(0,s.jsx)(n.li,{children:"Enforce status checks"}),"\n",(0,s.jsx)(n.li,{children:"Protect main and develop branches"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Version Control:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Use semantic versioning"}),"\n",(0,s.jsx)(n.li,{children:"Tag releases"}),"\n",(0,s.jsx)(n.li,{children:"Keep changelog updated"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Testing:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Write comprehensive tests"}),"\n",(0,s.jsx)(n.li,{children:"Maintain high coverage"}),"\n",(0,s.jsx)(n.li,{children:"Test in isolation"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Documentation:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Document API changes"}),"\n",(0,s.jsx)(n.li,{children:"Update deployment guides"}),"\n",(0,s.jsx)(n.li,{children:"Keep README current"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"future-improvements",children:"Future Improvements"}),"\n",(0,s.jsx)(n.p,{children:"Planned enhancements to the pipeline:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Automated Version Bumping:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Implement semantic release"}),"\n",(0,s.jsx)(n.li,{children:"Automate changelog generation"}),"\n",(0,s.jsx)(n.li,{children:"Version tagging"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Enhanced Testing:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Integration tests"}),"\n",(0,s.jsx)(n.li,{children:"Performance tests"}),"\n",(0,s.jsx)(n.li,{children:"Security scans"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Deployment Enhancements:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Blue-green deployments"}),"\n",(0,s.jsx)(n.li,{children:"Canary releases"}),"\n",(0,s.jsx)(n.li,{children:"Automated rollbacks"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Monitoring Improvements:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsx)(n.li,{children:"Enhanced metrics"}),"\n",(0,s.jsx)(n.li,{children:"Automated alerts"}),"\n",(0,s.jsx)(n.li,{children:"Performance tracking"}),"\n"]}),"\n"]}),"\n"]})]})}function a(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>c});var l=i(6540);const s={},r=l.createContext(s);function t(e){const n=l.useContext(r);return l.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),l.createElement(r.Provider,{value:n},e.children)}}}]);