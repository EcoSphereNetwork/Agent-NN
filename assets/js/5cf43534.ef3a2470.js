"use strict";(self.webpackChunkagent_nn_docs=self.webpackChunkagent_nn_docs||[]).push([[7304],{515:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"architecture/mcp_dataflow","title":"MCP Data Flow","description":"1. A user sends a request via CLI or Web UI to the API Gateway.","source":"@site/docs/architecture/mcp_dataflow.md","sourceDirName":"architecture","slug":"/architecture/mcp_dataflow","permalink":"/Agent-NN/architecture/mcp_dataflow","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var s=t(2540),a=t(3023);const o={},i="MCP Data Flow",c={},d=[];function l(e){const n={code:"code",h1:"h1",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"mcp-data-flow",children:"MCP Data Flow"})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["A user sends a request via CLI or Web UI to the ",(0,s.jsx)(n.strong,{children:"API Gateway"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The gateway forwards the task to the ",(0,s.jsx)(n.strong,{children:"Task-Dispatcher"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The dispatcher checks the ",(0,s.jsx)(n.strong,{children:"Session Manager"})," for context and queries the ",(0,s.jsx)(n.strong,{children:"Agent Registry"})," for suitable workers."]}),"\n",(0,s.jsxs)(n.li,{children:["Anschlie\xdfend sendet er ein ",(0,s.jsx)(n.code,{children:"ModelContext"}),"-Objekt an den gew\xe4hlten ",(0,s.jsx)(n.strong,{children:"AgentWorker"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Der Worker ruft das ",(0,s.jsx)(n.strong,{children:"LLM Gateway"})," auf (und optional den ",(0,s.jsx)(n.strong,{children:"Vector Store"}),"), um eine Antwort zu generieren."]}),"\n",(0,s.jsxs)(n.li,{children:["Der Worker gibt das aktualisierte ",(0,s.jsx)(n.code,{children:"ModelContext"})," an den Dispatcher zur\xfcck, der es an den Nutzer weiterleitet."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This flow decouples responsibilities and allows each service to evolve independently."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant U as User\n    participant TD as Task Dispatcher\n    participant SM as Session Manager\n    participant AR as Agent Registry\n    participant W as Worker Service\n    U->>TD: POST /task\n    TD->>SM: fetch session\n    TD->>AR: query agents\n    TD->>W: /run with ModelContext\n    W->>L: /generate\n    L--\x3e>W: completion\n    W--\x3e>TD: updated context\n    TD--\x3e>U: response\n"})})]})}function h(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},3023:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>i});var r=t(3696);const s={},a=r.createContext(s);function o(e){const n=r.useContext(a);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(a.Provider,{value:n},e.children)}}}]);