"use strict";(self.webpackChunkagent_nn_docs=self.webpackChunkagent_nn_docs||[]).push([[5342],{3218:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>h,frontMatter:()=>s,metadata:()=>r,toc:()=>o});const r=JSON.parse('{"id":"config_reference","title":"Configuration Reference","description":"This document lists the environment variables used by Agent-NN. Values can be defined in a .env file and are loaded via pydantic-settings.","source":"@site/docs/config_reference.md","sourceDirName":".","slug":"/config_reference","permalink":"/Agent-NN/config_reference","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"docs","previous":{"title":"Modell-Tracking mit MLflow","permalink":"/Agent-NN/development/model_tracking"},"next":{"title":"API- und CLI-\xdcbersicht","permalink":"/Agent-NN/development/api_overview"}}');var d=t(4848),i=t(8453);const s={},c="Configuration Reference",l={},o=[{value:"Loading Configuration",id:"loading-configuration",level:2}];function a(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,i.R)(),...e.components};return(0,d.jsxs)(d.Fragment,{children:[(0,d.jsx)(n.header,{children:(0,d.jsx)(n.h1,{id:"configuration-reference",children:"Configuration Reference"})}),"\n",(0,d.jsxs)(n.p,{children:["This document lists the environment variables used by Agent-NN. Values can be defined in a ",(0,d.jsx)(n.code,{children:".env"})," file and are loaded via ",(0,d.jsx)(n.code,{children:"pydantic-settings"}),"."]}),"\n",(0,d.jsxs)(n.table,{children:[(0,d.jsx)(n.thead,{children:(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.th,{children:"Variable"}),(0,d.jsx)(n.th,{children:"Description"})]})}),(0,d.jsxs)(n.tbody,{children:[(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"OPENAI_API_KEY"}),(0,d.jsx)(n.td,{children:"API key for OpenAI models"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"DATABASE_URL"}),(0,d.jsx)(n.td,{children:"Connection string for the database"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"LLM_BACKEND"}),(0,d.jsx)(n.td,{children:"Backend used by the LLM Gateway"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"LLM_MODEL"}),(0,d.jsx)(n.td,{children:"Default language model"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"LLM_TEMPERATURE"}),(0,d.jsx)(n.td,{children:"Sampling temperature"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"LLM_MAX_TOKENS"}),(0,d.jsx)(n.td,{children:"Maximum tokens per request"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"VECTOR_STORE_URL"}),(0,d.jsx)(n.td,{children:"URL of the vector store service"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"EMBEDDING_MODEL"}),(0,d.jsx)(n.td,{children:"Model used for embeddings"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"LOG_LEVEL"}),(0,d.jsx)(n.td,{children:"Logging level"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"LOG_FORMAT"}),(0,d.jsx)(n.td,{children:"Logging format"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"LOG_JSON"}),(0,d.jsx)(n.td,{children:"Enable JSON logs"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"AUTOTRAINER_FREQUENCY_HOURS"}),(0,d.jsx)(n.td,{children:"Interval for the AutoTrainer"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"AUTH_ENABLED"}),(0,d.jsx)(n.td,{children:"Enable authentication in services"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"API_AUTH_ENABLED"}),(0,d.jsx)(n.td,{children:"Authentication for API gateway"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"RATE_LIMITS_ENABLED"}),(0,d.jsx)(n.td,{children:"Enable rate limiting"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"DATA_DIR"}),(0,d.jsx)(n.td,{children:"Base data directory"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"SESSIONS_DIR"}),(0,d.jsx)(n.td,{children:"Session storage location"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"VECTOR_DB_DIR"}),(0,d.jsx)(n.td,{children:"Vector database directory"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"MODELS_DIR"}),(0,d.jsx)(n.td,{children:"Directory for models"})]}),(0,d.jsxs)(n.tr,{children:[(0,d.jsx)(n.td,{children:"MLFLOW_TRACKING_URI"}),(0,d.jsx)(n.td,{children:"MLflow tracking server"})]})]})]}),"\n",(0,d.jsx)(n.h2,{id:"loading-configuration",children:"Loading Configuration"}),"\n",(0,d.jsxs)(n.p,{children:["Agent-NN loads configuration values from a ",(0,d.jsx)(n.code,{children:".env"})," file in the project root. For\nproduction deployments use ",(0,d.jsx)(n.code,{children:".env.production"}),". Unknown keys in these files are\nignored thanks to ",(0,d.jsx)(n.code,{children:'extra="allow"'})," in the settings model. Values are validated by\n",(0,d.jsx)(n.code,{children:"pydantic-settings"}),"; booleans accept ",(0,d.jsx)(n.code,{children:"true"}),"/",(0,d.jsx)(n.code,{children:"false"})," strings and numeric fields\nmust contain valid numbers."]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,d.jsx)(n,{...e,children:(0,d.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>c});var r=t(6540);const d={},i=r.createContext(d);function s(e){const n=r.useContext(i);return r.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:s(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);