"use strict";(self.webpackChunkagent_nn_docs=self.webpackChunkagent_nn_docs||[]).push([[3395],{3023:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>c});var t=r(3696);const a={},s=t.createContext(a);function i(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:i(e.components),t.createElement(s.Provider,{value:n},e.children)}},5635:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>c,default:()=>h,frontMatter:()=>i,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"architecture/overview_mcp","title":"MCP Overview","description":"The Modular Control Plane architecture breaks Agent-NN into small services that communicate over defined APIs. This overview outlines the main building blocks.","source":"@site/docs/architecture/overview_mcp.md","sourceDirName":"architecture","slug":"/architecture/overview_mcp","permalink":"/Agent-NN/architecture/overview_mcp","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{}}');var a=r(2540),s=r(3023);const i={},c="MCP Overview",o={},d=[{value:"Directory Layout",id:"directory-layout",level:3}];function l(e){const n={code:"code",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.header,{children:(0,a.jsx)(n.h1,{id:"mcp-overview",children:"MCP Overview"})}),"\n",(0,a.jsx)(n.p,{children:"The Modular Control Plane architecture breaks Agent-NN into small services that communicate over defined APIs. This overview outlines the main building blocks."}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-mermaid",children:"graph TD\n    A[API-Gateway] --\x3e B[Task-Dispatcher]\n    A --\x3e U[User Manager]\n    B --\x3e C[Agent Registry]\n    B --\x3e D[Session Manager]\n    B --\x3e E[Worker Services]\n    B --\x3e F[Vector Store]\n    B --\x3e G[LLM Gateway]\n    E --\x3e F\n    E --\x3e G\n"})}),"\n",(0,a.jsx)(n.p,{children:"The following sequence shows the end-to-end flow after Phase\xa03:"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-mermaid",children:"sequenceDiagram\n    participant U as User\n    participant D as Dispatcher\n    participant W as Worker\n    participant L as LLM Gateway\n    participant V as Vector Store\n    U->>D: task request\n    D->>W: execute_task\n    W->>L: generate/qa\n    L->>V: query (optional)\n    L--\x3e>W: answer\n    W--\x3e>D: result\n    D--\x3e>U: response\n"})}),"\n",(0,a.jsx)(n.p,{children:"Each service can be scaled independently and replaced without touching the others. The dispatcher coordinates requests and uses the registry to find suitable workers. Session data and knowledge retrieval are handled by dedicated services."}),"\n",(0,a.jsx)(n.h3,{id:"directory-layout",children:"Directory Layout"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{children:"mcp/\n\u251c\u2500\u2500 task_dispatcher/\n\u251c\u2500\u2500 agent_registry/\n\u251c\u2500\u2500 session_manager/\n\u251c\u2500\u2500 vector_store/\n\u251c\u2500\u2500 llm_gateway/\n\u251c\u2500\u2500 user_manager/\n\u251c\u2500\u2500 worker_dev/\n\u251c\u2500\u2500 worker_loh/\n\u2514\u2500\u2500 worker_openhands/\n"})}),"\n",(0,a.jsxs)(n.p,{children:["All services expose small FastAPI apps with ",(0,a.jsx)(n.code,{children:"/health"})," endpoints and stubs for their main functions."]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}}}]);